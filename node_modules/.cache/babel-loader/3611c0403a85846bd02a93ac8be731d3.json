{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Owner\\\\Desktop\\\\AlgoMazeOff\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"C:\\\\Users\\\\Owner\\\\Desktop\\\\AlgoMazeOff\\\\src\\\\maze\\\\PathfindingVisualizer\\\\PathfindingVisualizer.jsx\";\nimport React, { Component } from 'react';\nimport Node from './Node/Node';\nimport { dijkstra, getNodesInShortestPathOrder } from '../algorithms/dijkstra';\nimport Navbar from \"../Navbar\";\nimport './PathfindingVisualizer.css';\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n      START_NODE_ROW: 20,\n      START_NODE_COL: 49,\n      FINISH_NODE_ROW: 19,\n      FINISH_NODE_COL: 48\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({\n      grid\n    });\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid,\n      mouseIsPressed: true\n    });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid\n    });\n  }\n\n  handleMouseUp() {\n    this.setState({\n      mouseIsPressed: false\n    });\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(\"node-\".concat(node.row, \"-\").concat(node.col)).className = 'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(\"node-\".concat(node.row, \"-\").concat(node.col)).className = 'node node-shortest-path';\n      }, 50 * i);\n    }\n  }\n\n  visualizeDijkstra() {\n    const grid = this.state.grid;\n    const startNode = grid[this.state.START_NODE_ROW][this.state.START_NODE_COL];\n    const finishNode = grid[this.state.FINISH_NODE_ROW][this.state.FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  refreshPage() {\n    window.location.reload(false);\n  }\n\n  refreshGrid() {\n    const grid = getInitialGrid();\n    this.setState({\n      grid\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          grid = _this$state.grid,\n          mouseIsPressed = _this$state.mouseIsPressed;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }\n    }, grid.map((row, rowIdx) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: rowIdx,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 15\n        }\n      }, row.map((node, nodeIdx) => {\n        const row = node.row,\n              col = node.col,\n              isFinish = node.isFinish,\n              isStart = node.isStart,\n              isWall = node.isWall;\n        return /*#__PURE__*/React.createElement(Node, {\n          key: nodeIdx,\n          col: col,\n          isFinish: isFinish,\n          isStart: isStart,\n          isWall: isWall,\n          mouseIsPressed: mouseIsPressed,\n          onMouseDown: (row, col) => this.handleMouseDown(row, col),\n          onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n          onMouseUp: () => this.handleMouseUp(),\n          row: row,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 21\n          }\n        });\n      }));\n    })), /*#__PURE__*/React.createElement(Navbar, {\n      search: () => this.visualizeDijkstra(),\n      refresh: () => this.refreshGrid(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  console.log(this.state.FINISH_NODE_COL);\n  return {\n    col,\n    row,\n    isStart: row === this.state.START_NODE_ROW && col === this.state.START_NODE_COL,\n    isFinish: row === this.state.FINISH_NODE_ROW && col === this.state.FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n\n  const newNode = _objectSpread(_objectSpread({}, node), {}, {\n    isWall: !node.isWall\n  });\n\n  newGrid[row][col] = newNode;\n  return newGrid;\n};","map":{"version":3,"sources":["C:/Users/Owner/Desktop/AlgoMazeOff/src/maze/PathfindingVisualizer/PathfindingVisualizer.jsx"],"names":["React","Component","Node","dijkstra","getNodesInShortestPathOrder","Navbar","PathfindingVisualizer","constructor","state","grid","mouseIsPressed","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","componentDidMount","getInitialGrid","setState","handleMouseDown","row","col","newGrid","getNewGridWithWallToggled","handleMouseEnter","handleMouseUp","animateDijkstra","visitedNodesInOrder","nodesInShortestPathOrder","i","length","setTimeout","animateShortestPath","node","document","getElementById","className","visualizeDijkstra","startNode","finishNode","refreshPage","window","location","reload","refreshGrid","render","map","rowIdx","nodeIdx","isFinish","isStart","isWall","currentRow","push","createNode","console","log","distance","Infinity","isVisited","previousNode","slice","newNode"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport Node from './Node/Node';\r\nimport {dijkstra, getNodesInShortestPathOrder} from '../algorithms/dijkstra';\r\nimport Navbar from \"../Navbar\"\r\n\r\nimport './PathfindingVisualizer.css';\r\n\r\n\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n      START_NODE_ROW: 20,\r\n      START_NODE_COL: 49,\r\n      FINISH_NODE_ROW: 19,\r\n      FINISH_NODE_COL: 48\r\n\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = getInitialGrid();\r\n    this.setState({grid});\r\n  }\r\n\r\n  handleMouseDown(row, col) {\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({grid: newGrid, mouseIsPressed: true});\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.mouseIsPressed) return;\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({grid: newGrid});\r\n  }\r\n\r\n  handleMouseUp() {\r\n    this.setState({mouseIsPressed: false});\r\n  }\r\n\r\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-visited';\r\n      }, 10 * i);\r\n    }\r\n  }\r\n\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-shortest-path';\r\n      }, 50 * i);\r\n    }\r\n  }\r\n\r\n  visualizeDijkstra() {\r\n    const {grid} = this.state;\r\n    const startNode = grid[this.state.START_NODE_ROW][this.state.START_NODE_COL];\r\n    const finishNode = grid[this.state.FINISH_NODE_ROW][this.state.FINISH_NODE_COL];\r\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n\r\n  refreshPage() {\r\n    window.location.reload(false);\r\n  }\r\n\r\n  refreshGrid(){\r\n    const grid = getInitialGrid();\r\n    this.setState({grid});\r\n\r\n  }\r\n  render() {\r\n    const {grid, mouseIsPressed} = this.state;\r\n\r\n    return (\r\n      <>\r\n       \r\n        <div className=\"grid\">\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx}>\r\n                {row.map((node, nodeIdx) => {\r\n                  const {row, col, isFinish, isStart, isWall} = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeIdx}\r\n                      col={col}\r\n                      isFinish={isFinish}\r\n                      isStart={isStart}\r\n                      isWall={isWall}\r\n                      mouseIsPressed={mouseIsPressed}\r\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                      onMouseEnter={(row, col) =>\r\n                        this.handleMouseEnter(row, col)\r\n                      }\r\n                      onMouseUp={() => this.handleMouseUp()}\r\n                      row={row}></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n        <Navbar search={() => this.visualizeDijkstra()} refresh={() => this.refreshGrid()} />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst getInitialGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < 20; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < 50; col++) {\r\n      currentRow.push(createNode(col, row));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (col, row) => {\r\n  console.log(this.state.FINISH_NODE_COL)\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === this.state.START_NODE_ROW && col === this.state.START_NODE_COL,\r\n    isFinish: row === this.state.FINISH_NODE_ROW && col === this.state.FINISH_NODE_COL,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    isWall: false,\r\n    previousNode: null,\r\n  };\r\n};\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n\r\n"]},"metadata":{},"sourceType":"module"}