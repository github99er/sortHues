{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/Owner/Desktop/SortOfficial/AlgoMazeOff/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\n// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function dijkstra(grid, startNode, finishNode) {\n  var visitedNodesInOrder = [];\n  startNode.distance = 0;\n  var unvisitedNodes = getAllNodes(grid);\n\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    var closestNode = unvisitedNodes.shift(); // If we encounter a wall, we skip it.\n\n    if (closestNode.isWall) continue; // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  var unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n\n  var _iterator = _createForOfIteratorHelper(unvisitedNeighbors),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var neighbor = _step.value;\n      neighbor.distance = node.distance + 1;\n      neighbor.previousNode = node;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  var neighbors = [];\n  var col = node.col,\n      row = node.row;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  var nodes = [];\n\n  var _iterator2 = _createForOfIteratorHelper(grid),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var row = _step2.value;\n\n      var _iterator3 = _createForOfIteratorHelper(row),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var node = _step3.value;\n          nodes.push(node);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return nodes;\n} // Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\n\n\nexport function getNodesInShortestPathOrder(finishNode) {\n  var nodesInShortestPathOrder = [];\n  var currentNode = finishNode;\n\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n\n  return nodesInShortestPathOrder;\n}","map":{"version":3,"sources":["C:/Users/Owner/Desktop/SortOfficial/AlgoMazeOff/src/maze/algorithms/dijkstra.js"],"names":["dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","getAllNodes","length","sortNodesByDistance","closestNode","shift","isWall","Infinity","isVisited","push","updateUnvisitedNeighbors","sort","nodeA","nodeB","node","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","previousNode","neighbors","col","row","filter","nodes","getNodesInShortestPathOrder","nodesInShortestPathOrder","currentNode","unshift"],"mappings":"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","sourcesContent":["// Performs Dijkstra's algorithm; returns *all* nodes in the order\r\n// in which they were visited. Also makes nodes point back to their\r\n// previous node, effectively allowing us to compute the shortest path\r\n// by backtracking from the finish node.\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n  while (!!unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n    // If we encounter a wall, we skip it.\r\n    if (closestNode.isWall) continue;\r\n    // If the closest node is at a distance of infinity,\r\n    // we must be trapped and should therefore stop.\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    updateUnvisitedNeighbors(closestNode, grid);\r\n  }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const {col, row} = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called *after* the dijkstra method above.\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}